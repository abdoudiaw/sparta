"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://sparta.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

global command :h3

[Syntax:]

global keyword values ... :pre

one or more keyword/value pairs :ulb,l
keyword = {fnum} or {nrho} or {vstream} or {temp} or {gravity} or {surfmax} or {gridcut} or {comm/sort} or {comm/style} or {weight} :l
  {fnum} value = ratio
    ratio = Fnum ratio of physical particles to simulation particles
  {nrho} value = density
    density = number density of background gas (# per length^3 units)
  {vstream} values = Vx Vy Vz
    Vx,Vy,Vz = streaming velocity of background gas (velocity units)
  {temp} values = thermal
    thermal = temperature of background gas (temperature units)
  {gravity} values = mag ex ey ez
    mag = magnitude of acceleration due to gravity (acceleration units)
    ex,ey,ez = direction vector that gravity acts in
  {surfmax} value = Nsurf
    Nsurf = max # of surface elements allowed in single grid cell
  {gridcut} value = cutoff
    cutoff = acquire ghost cells up to this far away (distance units)
  {comm/sort} value = yes or no
    yes/no = sort incoming messages by proc ID if yes, else no sort
  {comm/style} value = neigh or all
    neigh = setup particle comm with subset of near-neighbor processor
    all = allow particle comm with potentially any processor
  {weight} value = {wstyle} {mode}
    wstyle = {grid}
    mode = {none} or {volume} or {radius} :pre
:ule

[Examples:]

global fnum 1.0e20
global vstream 100.0 0 0 fnum 5.0e18
global temp 1000
global weight cell radius :pre


[Description:]

Define global properties of the system.

The {fnum} keyword sets the ratio of real, physical molecules to
simulation particles.  E.g. a value of 1.0e20 means that one particle
in the simulation represents 1.0e20 molecules of the particle species.

The {nrho} keyword sets the number density of the background gas.  For
3d simulations the units are #/volume.  For 2d, the units are
effectively #/area since the z dimension is treated as having a length
of 1.0.

Assuming your simulation is populated by particles from the background
gas, the {fnum} and {nrho} settings can determine how many particles
will be present in your simulation, when using the
"create_particles"_create_particles.html or "fix
inflow"_fix_inflow.html commands.

The {vstream} keyword sets the streaming velocity of the background
gas.

The {temp} keyword sets the thermal temperature of the background gas.
This is a Gaussian velocity distribution superposed on top of the
streaming velocity.

The {gravity} keyword sets an acceleration term which is included in
the motion of particles.  The magnitude of gravity is set by the {mag}
keyword.  Its direction of action is set as (ex,ex,ez).  The direction
does not have to be a unit vector.  If the magnitude is set to 0.0, no
acceleration term is included, which is the default.

The {surfmax} keyword determines the maximum number of surface
elements (lines in 2d, triangles in 3d) that can overlap a single grid
cell.  The default is 100, which should be large enough for any
simulation, unless you define very coarse grid cells (relative to the
size of surface elements).

The {gridcut} keyword determines the cutoff distance at which ghost
grid cells will be stored by each processor.  Assuming the processor
owns a compact clump of grid cells (see below), it will also store
ghost cell information from nearby grid cells, up to this distance
away.  If the setting is -1.0 (the default) then each processor owns a
copy of ghost cells for all grid cells in the simulation.  This can
require too much memory for large models.  If the cutoff is 0.0,
processors own a minimal number of ghost cells.  This saves memory but
may require multiple passes of communication each timestep to move all
the particles and migrate them to new owning processors.  Typically a
cutoff the size of 2-3 grid cell diameters is a good compromise that
requires only modest memory to store ghost cells and allows all
particle moves to complete in only one pass of communication.

IMPORTANT NOTE: Using the {gridcut} keyword with a cutoff >= 0.0 is
only possible if the grid cells owned by each processor are "clumped"
(by the time the next simulation is performed).  If each processor's
grid cells are "dispersed", then ghost cells cannot be stored for a
{gridcut} cutoff >= 0.0.  This will generate an error when a
simulation is performed.  The solution is to use the
"balance_grid"_balance_grid.html command to change to a clumped grid
cell assignment.  See "Section 5.8"_Section_howto.html#howto_8 of the
manual for an explanation of clumped and dispersed grid cell
assignments and their relative performance trade-offs.

An example of the {gridcut} cutoff applied to a clumped assignment is
shown in this zoom-in of a 2d hierarchical grid with 5 levels, refined
around a tilted ellipsoidal surface object (outlined in pink).  One
processor owns the grid cells colored orange.  A bounding rectangle
around the orange cells, extended by a short cutoff distance, is drawn
as a purple rectangle.  The rectangle contains only a few ghost grid
cells owned by other processors.

:c,image(JPG/partition_zoom_cutoff.jpg)

IMPORTANT NOTE: If grid cells have already been defined via the
"create_grid"_create_grid.html, "read_grid"_read_grid.html, or
"read_restart"_read_restart.html commands, when the {gridcut} cutoff
is specified, then all ghost cell information that is currently stored
will be erased.  In this case, a "balance_grid"_balance_grid.html
command must then be invoked to regenerate ghost cell information
before a simulation is performed.  Note that the previous note applies
in this scenario.  If the "balance_grid" option selects a dispersed
grid cell assignment and the {gridcut} cutoff = -1.0, then no ghost
information will be generated, resulting in an error when a simulation
is run.

The {comm/sort} keyword determines whether the messages a proc
receives for migrating particles (every step) and ghost grid cells (at
setup and after re-balance) are sorted by processor ID.  Doing this
requires a bit of overhead, but can make it easier to debug in
parallel, because simulations should be reproducible when run on the
same number of processors.  Without sorting, messages may arrive in a
randomized order, which means lists of particles and grid cells end up
in a different order leading to statistical differences between runs.

The {comm/style} keyword determines the style of particle
communication that is performed to migrate particles every step.  The
most efficient method is typically for each processor to exchange
messages with only the processors it has ghost cells for, which is the
method used by the {neigh} setting.  The {all} setting performs a
relatively cheap, but global communication operation to determine the
exact set of neighbors that need to be communicated with at each step.
For small processor counts there is typically little difference.  On
large processor counts the {neigh} setting can be significantly
faster.  However, if the flow is streaming in one dominant direction,
there may be no particle migration needed to upwind processors, so the
{all} method can generate smaller counts of neighboring processors.

Note that the {neigh} style only has an effect (at run time) when the
grid is decomposed by the RCB option of the "balance"_balance.html or
"fix balance"_fix_balance.html commands.  If that is not the case,
SPARTA performs the particle communication as if the {all} setting
were in place.

The {weight} keyword determines whether particle weighting is used.
Currently the only style allowed, as specified by wstyle = {grid}, is
grid-based weighting.  This is a mechanism for inducing every grid
cell to contain roughly the same number of particles (even if cells
are of varying size), so as to minimize the total number of particles
used in a simulation while preserving accurate time and spatial
averages of flow quantities.

If grid-based particle weighting is enabled, two computations occur.
First, each grid cell stores a "weight" which is pre-computed based
either on the cell {volume} or {radius}, as specified by the {mode}
setting.  The {radius} setting is only allowed for axisymmetric
systems; see "Section 4.2"_Section_howto.html#howto_2 for details.
The radius in this case is the distance the cell's midpoint is from
the axis of symmetry.

Second, when a particle moves from an initial cell to a final cell,
the initial/final ratio of the two cell weights is calculated.  If the
ratio > 1, then additional particles may be created in the final cell,
by cloning the attributes of the incoming particle.  E.g. if the ratio
= 3.4, then two extra particle are created, and a 3rd is created with
probability 0.4.  If the ratio < 1, then the incoming particle may be
deleted.  E.g. if the ratio is 0.7, then the incoming particle is
deleted with probability 0.3.

[Restrictions:]

The global surfmax command must be used before surface elements are
defined, e.g. via the "read_surf"_read_surf.html command.

[Related commands:]

"mixture"_mixture.html

[Default:]

The keyword defaults are fnum = 1.0, nrho = 1.0, vstream = 0.0 0.0
0.0, temp = 273.15, gravity = 0.0 0.0 0.0 0.0, surfmax = 100, gridcut
= -1.0, comm/sort = no, comm/style = neigh.
