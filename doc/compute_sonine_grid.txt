"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://sparta.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

compute sonine/grid command :h3

[Syntax:]

compute ID sonine/grid mix-ID keyword values ... :pre

ID is documented in "compute"_compute.html command :ulb,l
sonine/grid = style name of this compute command :l
mix-ID = mixture ID to perform calculation on :l
one or more keywords may be appended, multiple times :l
keyword = {thermal} or {a} or {b} :l
values = values for specific keyword :l
  {thermal} args = none = thermal temperature
  {a} args = dim order = sonine A moment
    dim = {x} or {y} or {z}
    order = number from 1 to 5
  {b} args = dim2 order = sonine B moment
    dim2 = {xx} or {yy} or {zz} or {xy} or {yz} or {xz}
    order = number from 1 to 5 :pre
:ule

[Examples:]

compute 1 sonine/grid species thermal a x 3 a z 3 b xy 3 b xz 3
compute 1 sonine/grid air a x 5 b xy 5 :pre

These commands will dump 10 time averaged sonine moments for each
species and each grid cell to a dump file every 1000 steps:

compute 1 sonine/grid species a x 5 b xy 5
fix 1 ave/grid 10 100 1000 c_1
dump 1 grid 1000 tmp.grid id f_1 :pre

[Description:]

Define a computation that calculates the sonine moments of the
velocity distribution of the particles in each grid cell.  The moments
are summed for each group of species in the specified mixture.  See
the "mixture"_mixture.html command for how a set of species can be
partitioned into groups.

The results of this compute are used by different commands in
different ways.  The values for a single timestep can be output by the
"dump grid"_dump.html command.

The values over many sampling timesteps can be averaged by the "fix
ave/grid"_fix_ave_grid.html command.  It does its averaging as if the
particles in the cell at each sampling timestep were combined together
into one large set to compute the formulas below.  The answer is then
divided by the number of sampling timesteps if it is not otherwise
normalized by the number of particles.  Note that this is a different
normalization than taking the values produced by the formulas below
for a single timestep, summing them over the sampling timesteps, and
then dividing by the number of sampling timesteps.

:line

The {thermal} keyword computes the average thermal kinetic energy for
all {N} particles in the group.  This is converted to a temperature
{T} by the following formula where {kB} is the Boltzmann factor:

COMx = Sum_i (mass_i Vx_i) / Sum_i (mass_i)
COMy = Sum_i (mass_i Vy_i) / Sum_i (mass_i)
COMz = Sum_i (mass_i Vz_i) / Sum_i (mass_i)
Cx = Vx - COMx
Cy = Vy - COMy
Cz = Vz - COMz
Csq = Cx*Cx + Cy*Cy + Cz*Cz
thermal_KE = Sum_i (1/2 mass_i Csq_i) / N
T = thermal_KE / (3/2 kB) :pre

Note that the thermal kinetic energy is calculated from {C} = the
thermal velocity of each particle, which is its velocity minus the
center-of-mass (COM) velocity of particles in the group.  The COM
velocity is the mass-weighted sum of the velocities of particles in
the group divided by the total mass of the particles.

:line

The {a} keyword calculates the average of one or more sonine A moments
for all particles in the group:

A1 = Sum_i (mass_i * Vdim * pow(Csq,1)) / Sum_i (mass_i)
A2 = Sum_i (mass_i * Vdim * pow(Csq,2)) / Sum_i (mass_i)
A3 = Sum_i (mass_i * Vdim * pow(Csq,3)) / Sum_i (mass_i)
A4 = Sum_i (mass_i * Vdim * pow(Csq,4)) / Sum_i (mass_i)
A5 = Sum_i (mass_i * Vdim * pow(Csq,5)) / Sum_i (mass_i) :pre

Vdim is Vx or Vy or Vz as specified by the {dim} value.  {Csq} is the
squared thermal velocity of the particle, as in the {thermal}
equations above.  The number of moments computed is specified by the
{order} value, e.g. for order = 3, the first 3 moments are computed.

The {b} keyword calculates the average of one or more sonine B moments
for all particles in the group:

B1 = Sum_i (mass_i * Vdim1 * Vdim2 * pow(Csq,1)) / Sum_i (mass_i)
B2 = Sum_i (mass_i * Vdim1 * Vdim2 * pow(Csq,2)) / Sum_i (mass_i)
B3 = Sum_i (mass_i * Vdim1 * Vdim2 * pow(Csq,3)) / Sum_i (mass_i)
B4 = Sum_i (mass_i * Vdim1 * Vdim2 * pow(Csq,4)) / Sum_i (mass_i)
B5 = Sum_i (mass_i * Vdim1 * Vdim2 * pow(Csq,5)) / Sum_i (mass_i) :pre

Vdim is Vx or Vy or Vz as specified by the {dim} value.  {Csq} is the
squared thermal velocity of the particle, as in the {thermal}
equations above.  The number of moments computed is specified by the
{order} value, , e.g. for order = 3, the first 3 moments are computed.

:line

[Output info:]

This compute calculates a per-grid array, with the number of columns
is equal to the number of values times the number of groups.  The
ordering of columns is first by values, then by groups.  I.e. if the
{thermal} and {b xy 2} moments were specified as keywords, then the
1st thru 3rd columns would be the {thermal} and B1 and B2 moments of
the first group, the 4th thru 6th columns would be the {thermal} and
B1 and B2 moments of the second group, etc.

This compute performs calculations for all flavors of child grid cells
in the simulation, which includes unsplit, cut, split, and sub cells.
See "Section 4.8"_Section_howto.html#howto_8 of the manual gives
details of how SPARTA defines child, unsplit, split, and sub cells.
Note that split cells and unsplit cells inside closed surfaces contain
no particles.  Thus they will compute a zero result for all the
individual values.

The array can be accessed by any command that uses per-grid values
from a compute as input.  See "Section 4.4"_Section_howto.html#howto_4
for an overview of SPARTA output options.

The per-grid array values will be in the "units"_units.html
appropriate to the individual values as described above.  {Thermal} is
in temperature units.  A and B are in units like velocity cubed or
velocity to the 6th power.

[Restrictions:] none

[Related commands:]

"fix ave/grid"_fix_ave_grid.html, "dump grid"_dump.html

[Default:] none
