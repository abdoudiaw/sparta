"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://sparta.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

balance_grid command :h3

[Syntax:]

balance_grid keyword args ... :pre

keyword = {none} or {stride} or {clump} or {block} or {random} or {proc} or {rcb} :ulb,l
  {none} args = none
  {stride} args = {xyz} or {xzy} or {yxz} or {yzx} or {zxy} or {zyx}
  {clump} args = {xyz} or {xzy} or {yxz} or {yzx} or {zxy} or {zyx}
  {block} args = Px Py Pz
    Px,Py,Pz = # of processors in each dimension
  {random} args = none 
  {proc} args = none
  {rcb} args = weight
    weight = {cell} or {mol} :pre
:ule

[Examples:]

balance_grid block * * *
balance_grid block * 4 *
balance_grid clump yxz
balance_grid random
balance_grid rcb mol :pre

[Description:]

This command adjusts the assignment of grid cells and their particles
to processors, to attempt to balance the computational cost (load)
evenly across processors.  The load balancing is "static" in the sense
that this command performs the balancing once, before or between
simulations. The assignments will remain static during the
subsequent run.  To perform "dynamic" balancing, see the "fix
balance"_fix_balance.html command, which can adjust the assignemt of
grid cells to processors on-the-fly during a run.

After grid cells have been assigned, they are migrated to new owning
processors, along with any particles they own or other per-cell
attributes stored by fixes.  The internal data structures within
SPARTA for grid cells and particles are re-initialized with the new
decomposition.

This command can be used immediately after the grid is created, via
the "create_grid"_create_grid.html or "read_restart"_read_restart.html
commands.  In the former case balance_grid can be used to partition
the grid in a more desirable manner than the default creation options
allow for.  In the latter case, balance grid can be used to change the
somewhat random assignment of grid cells to processors that will be
made if the restart file is read by a different number of processors
than it was written by.

This command can also be used once particles have been created, or a
simulation has come to equilibrium with a spatially varying density
distribution of particles, so that the computational load is more
evenly balanced across processors.

:line

Depending on the specified keyword, the grid cells assigned to each
processor by this command will either be "clumped" or "dispersed".

The {clump} and {block} keywords will produce clumped assignments of
child cells to each processor.  This means each processor's cells will
be geometrically compact.  The {stride} and {random} keywords, as well
as the round-robin assignment scheme for grids with multiple levels
(described below), will produce dispersed assignments of child cells
to each processor.  This means the processor's cells will be
geometrically dispersed across the simulation domain and so they
cannot be enclosed in a small bounding box.

Other commands have similar effects on grid cell assignment, so it is
important to understand the difference between the two cases and the
effects they can have on performance of a simulation.  For example the
create_grid and read_grid commands may produce dispersed assignments,
depending on the options used, which can be converted to a clumped
assignment by the balance_grid command.

Simulation typically run faster with clumped grid cell assignments.
This is because the cost of communicating particles is reduced if
particles that move to a neighboring grid cell often stay
on-processor.  Similarly, some stages of simulation setup may run
faster with a clumped assignment.  For example the finding of nearby
ghost grid cells and the computation of surface element intersections
with grid cells.  The latter operation is invoked when the
"read_surf"_read_surf.html command is used.

If the spatial distribution of particles is highly irregular and/or
dynamically changing, or if the computational work per grid cell is
otherwise highly imbalanced, a clumped assignment of grid cells to
processors may not lead to optimal balancing.  In these scenarios a
dispersed assignment of grid cells to processsors may run faster even
with the overhead of increased particle communication.  This is
because (somewhat) randomly assigning grid cells to processors can
balance the computational load in a statistical sense.

:line

The {none} keyword will not change the assignment of grid cells to
processors.  However it will update the internal data structures
within SPARTA that store ghost cell information on each processor for
cells owned by other processors.  This is useful if the "global
gridcut"_global.html command was used after grid cells were already
defined.  That command erases ghost cell information stored by
processors, which then needs to be re-generated before a simulation is
run.  Using the balance_grid none command will re-generate the ghost
cell information.

The {stride}, {clump}, and {block} keywords can only be used if the
grid is "uniform".  The grid in SPARTA is hierarchical with one or
more levels, as defined by the "create_grid"_create_grid.html or
"read_grid"_read_grid.html commands.  If the parent cell of every grid
cell is at the same level of the hierarchy, then the grid is uniform,
meaning the collection of grid cells effectively form a uniform fine
grid overlaying the entire simulation domain.

The meaning of the {stride}, {clump}, and {block} keywords is exactly
the same as when they are used with the "create_grid"_create_grid.html
command.  See its doc page for details.

The {random} keyword means that each grid cell will be assigned
randomly to one of the processors.  Note that in this case every
processor will typically not be assigned the exact same number of
cells.

The {proc} keyword means that each processor will choose a random
processor to assign its first grid cell to.  It will then loop over
its grid cells and assign each to consecutive processors, wrapping
around the enumeration of processors if necessary.  Note that in this
case every processor will typically not be assigned exactly the same
number of cells.

The {rcb} keyword uses a recursive coordinate bisectioning (RCB)
algorithm to assign spatially-compact clumps of grid cells to
processors.  Each grid cell has a "weight" in this algorithm so that
each processor is assigned an equal total weight of grid cells, as
nearly as possible.  If the {weight} argument is specified as {cell},
than the weight for each grid cell is 1.0, so that each processor will
end up with an equal number of grid cells.  If the {weight} argument
is specified as {mol}, than the weight for each grid cell is the
number of particles it currently owns, so that each processor will end
up with an equal number of particles.

Here are 2 example pictures, for a 2d simulation, of the partitioning
provided by the RCB algorithm for a simulation on P processors of
100x100 or 10000 grid cells.  The one on the left is for an initially
uniform distribution of particles.  The one on the right is at a later
time when the particle density is larger on the right side of the
simulation box.

TODO: include images

[Restrictions:]

This command can only be used after the grid has been created by the
"create_grid"_create_grid.html, "read_grid"_read_grid, or
"read_restart"_read_restart.html commands.

This command also initializes various options in SPARTA before
performing the balancing.  This is so that grid cells are ready to
migrate to new processors.  Thus if an error is flagged, e.g. that a
simulation box boundary condition is not yet assigned, that operation
needs to be performed in the input script before balancing can be
performed.

[Related commands:]

"fix balance"_fix_balance.html

[Default:] none
