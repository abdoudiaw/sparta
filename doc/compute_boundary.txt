"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://sparta.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

compute boundary command :h3

[Syntax:]

compute ID boundary mix-ID value1 value2 ... :pre

ID is documented in "compute"_compute.html command :ulb,l
boundary = style name of this compute command :l
mix-ID = mixture ID to perform calculation on :l
one or more values can be appended :l
value = {n} or {press} or {shx} or {shy} or {shz} or {ke} :l
  n = count of particles hitting boundary
  press = magnitude of normal pressure on boundary
  shx,shy,shz = components of shear stress on boundary
  ke = flux of kinetic energy on boundary 
  erot = flux of rotational energy on boundary 
  evib = flux of vibrational energy on boundary 
  etot = flux of total energy on boundary :pre
:ule

[Examples:]

compute 1 boundary all n press eng
compute mine boundary species press shx shy shz :pre

These commands will dump time averages for each species and each
boundary to a file every 1000 steps:

compute 1 boundary species n press shx shy shz
fix 1 ave/time 10 100 1000 c_1 file tmp.boundary :pre

[Description:]

Define a computation that calculates one or more values for each
boundary (i.e. face) of the simulation box, based on the particles
that strike that boundary.  The values are summed for each group of
species in the specified mixture.  See the "mixture"_mixture.html
command for how a set of species can be partitioned into groups.

The manner in which statistics are tallied for each boundary depends
on the style of boundary as specified by the "boundary"_boundary.html
command.  For {outflow} boundaries, only the flux of particles leaving
the simulation box contributes to the pressure, stress, and energy;
there is no contribution from reflected particles.  For {periodic}
boundaries, only the count {n} is tallied, since the particles exert
no pressure or stress on the boundary.  For {specular} boundaries, the
particle collisions exert pressure and stress on the boundary but no
energy flux, since the collisions conserve energy.  For {surface}
boundaries, each collision may contribute to all the values, depending
on the "surface collision model"_surf_collide.html.

:line

The {n} value counts the number of particles in the group striking the
boundary or passing through it.

The {press} value calculates the pressure {P} exerted on the boundary
in the normal direction by particles in the group, such that outward
pressure is positive.  This is computed as

p_delta = mass * (V_post - V_pre)
P = Sum_i (p_delta_i dot N) / (A * dt / fnum) :pre

where p_delta is the change in momentum of a particle, whose velocity
changes from V_pre to V_post when colliding with the boundary.  The
pressure exerted on the boundary is the sum over all contributing
p_delta dotted into the normal N of the boundary which is directed
into the box, normalized by A = the area of the boundary face and dt =
the timestep and fnum = the real/simulated particle ratio set by the
"global fnum"_global.html command.

The {shx}, {shy}, {shz} values calculate the shear pressure components
Sx, Sy, Sz extered on the boundary in the tangential direction to its
normal by particles in the group, with respect to the x, y, z
coordinate axes.  These are computed as

p_delta = mass * (V_post - V_pre)
p_delta_t = p_delta - (p_delta dot N) N
Sx = - Sum_i (p_delta_t_x) / (A * dt / fnum)
Sy = - Sum_i (p_delta_t_y) / (A * dt / fnum)
Sz = - Sum_i (p_delta_t_z) / (A * dt / fnum) :pre

where p_delta, V_pre, V_post, N, A, and dt are defined as before.
P_delta_t is the tangential component of the change in momentum vector
p_delta of a particle.  P_delta_t_x (and y,z) are its x, y, z
components.

The {ke} value calculates the kinetic energy flux {Eflux} imparted to
the boundary by particles in the group, such that energy lost by a
particle is a positive flux.  This is computed as

e_delta = 1/2 mass (V_post^2 - V_pre^2)
Eflux = - Sum_i (e_delta) / (A * dt / fnum) :pre

where e_delta is the kinetic energy change in a particle, whose
velocity changes from V_pre to V_post when colliding with the
boundary.  The energy flux imparted to the boundary is the sum over
all contributing e_delta, normalized by A = the area of the boundary
face and dt = the timestep and fnum = the real/simulated
particle ratio set by the "global fnum"_global.html command.

The {erot} value calculates the rotational energy flux {Eflux}
imparted to the boundary by particles in the group, such that energy
lost by a particle is a positive flux.  This is computed as

e_delta = Erot_post - Erot_pre
Eflux = - Sum_i (e_delta) / (A * dt / fnum) :pre

where e_delta is the rotational energy change in a particle, whose
internal rotational energy changes from Erot_pre to Erot_post when
colliding with the boundary.  The flux equation is the same as for the
{ke} value.

The {evib} value calculates the vibrational energy flux {Eflux}
imparted to the boundary by particles in the group, such that energy
lost by a particle is a positive flux.  This is computed as

e_delta = Evib_post - Evib_pre
Eflux = - Sum_i (e_delta) / (A * dt / fnum) :pre

where e_delta is the vibrational energy change in a particle, whose
internal vibrational energy changes from Evib_pre to Evib_post when
colliding with the boundary.  The flux equation is the same as for the
{ke} value.

The {etot} value calculates the total energy flux imparted to the
boundary by particles in the group, such that energy lost by a
particle is a positive flux.  This is simply the sum of kinetic,
rotational, and vibrational energies.  Thus the total energy flux is
the sum of what is computed by the {ke}, {erot}, and {evib} values.

:line

[Output info:]

This compute calculates a global array, with the number of columns
equal to the number of values times the number of groups.  The
ordering of columns is first by values, then by groups.  I.e. if the
{n} and {u} values were specified as keywords, then the first two
columns would be {n} and {u} for the first group, the 3rd and 4th
columns would be {n} and {u} for the second group, etc.  The number of
rows is 4 for a 2d simulation for the 4 faces (xlo, xhi, ylo, yhi),
and it is 6 for a 3d simulation (xlo, xhi, ylo, yhi, zlo, zhi).

The array can be accessed by any command that uses global array values
from a compute as input.  See "Section 4.4"_Section_howto.html#howto_4
for an overview of SPARTA output options.

The array values will be in the "units"_units.html appropriate to the
individual values as described above.  {N} is unitless. {Press},
{shx}, {shy}, {shz} are in pressure units.  {Ke}, {erot}, {evib}, and
{etot} are in energy/area-time units for 3d simulations and
energy/length-time units for 2d simulations.

[Restrictions:] none

[Related commands:]

"fix ave/time"_fix_ave_time.html

[Default:] none
