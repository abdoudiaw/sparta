"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://sparta.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

compute grid command :h3

[Syntax:]

compute ID grid mix-ID value1 value2 ... :pre

ID is documented in "compute"_compute.html command :ulb,l
grid = style name of this compute command :l
mix-ID = mixture ID to perform calculation on :l
one or more values can be appended :l
value = {n} or {ndensity} or {mass} or {u} or {v} or {w} or {usq} or {vsq} or {wsq} of {ke} or {temp} or {erot} or {trot} :l
  {n} = particle count
  {ndensity} = number density
  {mass} = mass
  {u} = x component of velocity
  {v} = y component of velocity
  {w} = z component of velocity
  {usq} = x component of velocity squared
  {vsq} = y component of velocity squared
  {wsq} = z component of velocity squared
  {ke} = kinetic energy
  {temp} = temperature
  {erot} = rotational energy
  {trot} = rotational temperature
  {evib} = vibrational energy :pre
:ule

[Examples:]

compute 1 grid species n u v w usq vsq wsq
compute 1 grid air n u v w :pre

These commands will dump time averages for each species and each grid
cell to a dump file every 1000 steps:

compute 1 grid species n u v w usq vsq wsq
fix 1 ave/grid 10 100 1000 c_1
dump 1 grid 1000 tmp.grid id f_1 :pre

[Description:]

Define a computation that calculates one or more values for each grid
cell, based on the particles in the cell.  The values are summed for
each group of species in the specified mixture.  See the
"mixture"_mixture.html command for how a set of species can be
partitioned into groups.

The results of this compute can be used by different commands in
different ways.  The values for a single timestep can be output by the
"dump grid"_dump.html command.

The values over many sampling timesteps can be averaged by the "fix
ave/grid"_fix_ave_grid.html command.  It does its averaging as if the
particles in the cell at each sampling timestep were combined together
into one large set to compute the formulas below.  The answer is then
divided by the number of sampling timesteps if it is not otherwise
normalized by the number of particles.  Note that this is a different
normalization than taking the values produced by the formulas below
for a single timestep, summing them over the sampling timesteps, and
then dividing by the number of sampling timesteps.

:line

The {n} value counts the number of particles in the group.

The {ndensity} value computes the number density of particles in the
group:

Ndensity = N * fnum / volume

N is the number of particles (same as the {n} keyword), fnum is the
real/simulated particle ratio set by the "global fnum"_global.html
command, and volume is the flow volume of the grid cell.

The {mass} value computes the average mass of particles in the group:

Mass = Sum_i (mass_i) / N :pre

where Sum_i is a sum over particles in the grid cell and in the group.

The {u}, {v}, {w} values compute the components of the average
velocity of particles in the group:

U = Sum_i (mass_i Vx_i) / Sum_i (mass_i) :pre

The {usq}, {vsq}, {wsq} values compute the squared component of
the average velocity of particles in the group.

Usq = Sum_i (mass_i Vx_i Vx_i) / Sum_i (mass_i) :pre

The {ke} value computes the average kinetic energy of particles in the
group:

Vsq = Vx*Vx + Vy*Vy + Vz*Vz
KE = Sum_i (1/2 mass_i Vsq_i) / N :pre

The {temp} value first computes the average kinetic energy of
particles in the group, as for the {ke} value.  This is then converted
to a temperature {T} by the following formula where {kB} is the
Boltzmann factor:

Vsq = Vx*Vx + Vy*Vy + Vz*Vz
KE = Sum_i (1/2 mass_i Vsq_i) / N
T = KE / (3/2 kB) :pre

Note that this definition of temperature does not subtract out a net
streaming velocity for particles in the grid cell, so it is not a
thermal temperature when the particles have a non-zero streaming
velocity.  See the "compute sonine/grid"_compute_sonine_grid.html
command to calculate thermal temperatures after subtracting out
streaming components of velocity.

The {erot} value computes the average rotational energy of particles
in the group:

Erot = Sum_i (erot_i) / N :pre

The {trot} value computes a rotational temperature by the following
formula where {kB} is the Boltzmann factor:

Trot = (2/kB) Sum_i (erot_i) / Sum_i (dof_i) :pre

Dof_i is the number of rotational degrees of freedom for particle i.

The {evib} value computes the average vibrational energy of particles
in the group:

Erot = Sum_i (evib_i) / N :pre

[Output info:]

This compute calculates a per-grid array, with the number of columns
equal to the number of values times the number of groups.  The
ordering of columns is first by values, then by groups.  I.e. if the
{n} and {u} values were specified as keywords, then the first two
columns would be {n} and {u} for the first group, the 3rd and 4th
columns would be {n} and {u} for the second group, etc.

This compute performs calculations for all flavors of child grid cells
in the simulation, which includes unsplit, cut, split, and sub cells.
See "Section 4.8"_Section_howto.html#howto_8 of the manual gives
details of how SPARTA defines child, unsplit, split, and sub cells.
Note that split cells and unsplit cells inside closed surfaces contain
no particles.  Thus they will compute a zero result for all the
individual values.

The array can be accessed by any command that uses per-grid values
from a compute as input.  See "Section 4.4"_Section_howto.html#howto_4
for an overview of SPARTA output options.

The per-grid array values will be in the "units"_units.html
appropriate to the individual values as described above.  {N} is
unitless.  {Ndensity} is in 1/distance^3 units for 3d simulations and
1/distance^2 units for 2d simulations.  {Mass} is in mass units.  {U},
{v}, and {w} are in velocity units.  {Usq}, {vsq}, and {wsq} are in
velocity squared units.  {Ke}, {erot}, and {evib} are in energy units.
{Temp} and {Trot} are in temperature units.

[Restrictions:] none

[Related commands:]

"fix ave/grid"_fix_ave_grid.html, "dump grid"_dump.html

[Default:] none
