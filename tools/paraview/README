This directory contains two Python programs that can be used to
convert SPARTA surface and grid data to ParaView .pvd format for
visualization with ParaView:

surf2paraview.py  
grid2paraview.py

Note that you must have ParaView installed on your system to use these
scripts.  Installation and usage instructions follow.

These tools were written by Tom Otahal (Sandia), who can
be contacted at tjotaha at sandia.gov.

-------------------------------

  ** Important **

The ParaView pvpython interpreter must be used to run these Python scripts.  
Using a standard Python interpreter will not work, since the scripts will
not have access to the required ParaView Python modules and libraries.

-------------------------------

  ** Important **

  I. GETTING STARTED

Download and install ParaView at www.paraview.org.

Binary installers are available for Linux, MacOS, and Windows.
Locate the pvpython binary in your ParaView installation.  

  On Linux:

pvpython is in the bin/ directory of the extracted tar.gz file.

  On MacOS:

pvpython is in /Applications/paraview.app/Contents/bin/.

  On Windows:

pvpython is in C:\Program Files (x86)\ParaView 4.1.0\bin. 

-------------------------------

  II. USING surf2paraview.py

The surf2paraview.py program converts 3D SPARTA surface triangulation
files and 2D SPARTA closed polygon files into ParaView .pvd format.
Additionally, the program can take an optional number of SPARTA
surface dump files and associate the calculated results with the
surface geometry over time.

The program has two required arguments:

% pvpython surf2paraview.py data.mir mir_surf

The first argument is the filename of a SPARTA surf file containing a
3d triangulation of an objects surface, or a 2d enclosed polygon of
line segments.  The second argument is the name of the resulting
paraview output .pvd file.  The above command line will produce a file
called mir_surf.pvd and a directory called mir_surf/.  The mir_surf/
directory contains a ParaView .vtu file with geometry information and
is referred to by the mir_surf.pvd file.  Start ParaView and open the
file mir_surf.pvd to visualize the surface.

The program has one optional argument to associate time result data:

% pvpython surf2paraview.py data.mir mir_surf -r ../parent/mir/tmp_surf.*

The -r (or --result) option is followed by a list of filenmames with
full or relative paths to SPARTA surf dump files.  The files can be
over different time steps and from different processors at the same
time step. The script will organize the result files so that ParaView
can play a smooth animation over all time steps for the stored
variables in the file.  The example above uses a wildcard character in
the filename to gather all of the tmp_surf.* files stored in the
directory.  Wildcard characters can only be used in the filename part
of the path and can be given for multiple paths.

NOTE: SPARTA 2d enclosed polygons will be 2d outlines in ParaView.
This means that any grid cells inside of the polygon will be visible
in ParaView.  To obscure the inside of the enclosed polygon, select a
Delaunay 2D filter from the ParaView menu.

  Filters->Alphabetical->Delaunay 2D 

This will triangulate the interior of the polygon and obscure interior
grid cells from view.

-------------------------------

  III.  USING grid2paraview.py

The grid2paraview.py program converts a text file description of
a 2D or 3D SPARTA mesh into a ParaView .pvd file.  Additionally, the
program can take an optional number of SPARTA grid dump files and
assocaite the calculated results with the grid cells over time.

The program has two required arguments:

% pvpython grid2paraview.py mir.txt mir_grid

The first argument is a text file containing a description of the
SPARTA grid.  The description uses three commands found in the SPARTA
input deck.  These commands are dimension, create_box, and
create_grid.  The create_grid command only uses the level subcommand
and * character to specify cell ranges.  Other subcommands that
specify processor assignments for cells are not understood by the
program.  Additionally, none of the three commands can contain
variables.  The files may contain comments given by the #
character. All three commands must be used once and can occur in any
order.

For example, the mir.txt file given above could contain the following
grid description:

  dimension           3
  create_box          -15.0 30.0 -20.0 15.0 -20.0 20.0
  create_grid         100 100 100 level 2 * * * 2 2 2

The second argument gives the name of the resulting .pvd file.  The
above command line will produce a file called mir_grid.pvd and a
directory called mir_grid/.  The mir_grid/ directory contains all the
ParaView .vtu files used to describe the grid cell geometry.  The
mir_grid.pvd references the mir_grid/ directory.  Open mir_grid.pvd
with ParaView to view the grid.

The program has an optional argument to associate time result data:

% pvpython grid2paraview.py mir.txt mir_grid -r ../parent/mir/tmp_flow.*

The -r (or --result) option is followed by a list of filenmames with
full or relative paths to SPARTA grid dump files. This option operates
like the -r option in the surf2paraview.py program.

The grid description given in the *.txt file must match the data given
in the grid flow files. The grid flow files must also contain a column
that gives the SPARTA encoded integer id for the cell.

For large grids (greater than 100x100x100), the time to write out the
.pvd file and data directory can be lengthy.  For this reason, the
grid2paraview.py program has three options for breaking the grid into
smaller chunks at the top level of the grid.  Each chunk will be
written out as a seperate .vtu file in the named subdirectory the .pvd
file refers to.  The options are: -xc (or --xchunk, default 100), -yc
(or --ychunk, default 100), and -zc (or --zchunk, default 100).  The
program will launch a seperate thread of computation for each grid
chunk.  On workstation machines with lots of compute cores and memory,
using small chunks (of about 1 million cells each) can greatly speed
up output time. For 2d grids, the values of -zc is ignored.

NOTE: On Windows platforms, the grid chunking will always be executed
serially.  This is due to how the multiprocessing module is
implemented on Windows, which prohibits mutliple instances of pvpython
from starting independently.
